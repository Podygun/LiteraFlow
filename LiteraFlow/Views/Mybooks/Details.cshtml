@model BookAndChaptersViewModel


  <div class="row">
    <div id="leftCol" class="col-12 col-lg-8 pe-4">

        <div class="row mb-3">
            <div class=" d-flex flex-wrap justify-content-start">
                <select class="selector" id="chapterSelector">
                    @for (int i = 0; i < @Model.Chapters.Count; i++)
                    {
                        <option value="@Model.Chapters[i].ChapterId">@Model.Chapters[i].Title</option>
                    }
                    
                </select>
                <span class="col-auto">
                    <i class="fa fa-plus text-black h-auto" style="cursor:pointer;" id="createChapterBtn" aria-hidden="true"></i>

                </span>
                
            </div>

        </div>

        <form id="ChapterForm">
            @Html.AntiForgeryToken()
            
            <label class="mb-3">
                <div>Заголовок</div>
                <input id="chapterTitle" value="@Model.Chapters[^1].Title" />

            </label>

            <div class="mb-3">
                <label>Текст</label>
                <p class="chapter_redactor" contenteditable="true" id="chapterText"></p>
            </div>


            <input type="hidden" id="chapterIdStore" readonly />
            <input type="hidden" id="bookIdStore" name="Book.BookId" value="@Model.Book.BookId" readonly />

            <button type="button" id="saveChapterBtn">Сохранить</button>
        </form>

    </div>

    <div id="rightCol" class="ps-4 col-0 col-lg-4 d-flex flex-wrap justify-content-center">
        <div class="w-100">
            <form method="post" action="savesettings">
                @Html.AntiForgeryToken()
                <div class="mb-3">
                    <label class="form__label">Название</label>
                    <input class="form__input" name="Title" value="@Model.Book.Title" type="text" />
                </div>
                <div class="mb-3">
                    <label class="form__label">Описание</label>
                    <p class="form__p" name="Description" value="@Model.Book.Description" type="text" contenteditable="true">@Model.Book.Description</p>
                </div>
                <div class="mb-3">
                    <label class="form__label">Заметка</label>
                    <input class="form__input" name="AuthorNote" value="@Model.Book.AuthorNote" type="text" />
                </div>
                <div class="mb-3">
                    <label class="form__label">Цена</label>
                    <input class="form__input" name="Price" value="@Model.Book.Price" type="text" />
                </div>
                <input type="hidden" name="BookId" id="bookId" value="@Model.Book.BookId" />
                <button type="submit">Сохранить</button>
            </form>
        </div>
        


    </div>

    @* TODO Amount of letters *@

    <div id="success-noti" class="alert alert-success d-none align-items-center w-
position-absolute align-self-start" role="alert">
        <i class="fa fa-check-circle text-black me-3" aria-hidden="true"></i>
        <label>
            Пример уведомления об успехе с иконкой
        </label>
    </div>

    <div class="toggle-button" id="toggleButton">
        <i style="cursor:pointer;" id="iconToggler" class="fa fa-angle-double-right text-black" aria-hidden="true"></i>
    </div>

    <button id="showNotification">Показать уведомление</button>

    
    

</div>  

@section Scripts{
    <script defer>     
        $(document).ready(function () {

            const chapterSelector = document.getElementById("chapterSelector");
            const chapterText = document.getElementById("chapterText");
            const chapterTitle = document.getElementById("chapterTitle");
            const chapterId = document.getElementById("chapterIdStore");
            

            function LoadChapterText() {
                let SelectedChapterId = chapterSelector.options[chapterSelector.selectedIndex].value;
                let ThisBookId = $("#bookIdStore").val();

                console.log(ThisBookId);
                console.log(SelectedChapterId);

                chapterId.value = SelectedChapterId;
                $.ajax({
                    type: "POST",
                    url: "@Url.Action("GetChapterText")",
                    dataType: "json",
                    data: { chapterId: SelectedChapterId, bookId: ThisBookId },
                    success: function (result) {
                        chapterText.textContent = result;
                    },
                    error: function (req, status, error) {
                        //TODO refactor this
                        chapterText.textContent = status;
                    }
                });
            };

            function ChapterSelected(){

                LoadChapterText();
                chapterTitle.value = chapterSelector.options[chapterSelector.selectedIndex].textContent;
            };

            $("#saveChapterBtn").click(function (){
                let chapter = {
                    BookId: $("#bookId").val(),
                    Title: $("#chapterTitle").val(),
                    Text: $("#chapterText").text(),
                    ChapterId: $("#chapterIdStore").val() || null,                    
                };

                $.ajax({
                    url: '@Url.Action("SaveChapter", "MyBooks")',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(chapter),
                    success: showSuccessNotification,
                    error: function (req, status, error) {
                        //TODO popup
                        chapterText.textContent = status;
                    }
                }); 
            });


            chapterSelector.addEventListener("change", ChapterSelected);

            chapterSelector.options[chapterSelector.options.length - 1].selected = true;
            ChapterSelected();

            // Logic of creating new chapter button
            const createChapterBtn = document.getElementById("createChapterBtn");

            createChapterBtn.addEventListener('click', function () {
                let newOption = document.createElement("option");
                newOption.textContent = "Новая глава";
                newOption.value = "Новая глава";
                newOption.selected = true;
                chapterSelector.appendChild(newOption);

                chapterText.textContent = "Текст";
                chapterTitle.value = "Новая глава";
                chapterId.value = null;
            });

            $("#toggleButton").click(function () {
                $("#leftCol").toggleClass("col-12 col-lg-12");
                $("#rightCol").toggleClass("col-0 col-lg-0 d-none");
                
                
                
                // Измените текст кнопки на основе состояния
                if ($("#leftCol").hasClass("col-12")) {
                    $("#iconToggler").removeClass("fa-angle-double-left");
                } else {
                    $("#iconToggler").addClass("fa-angle-double-left");
                }
            });

            function showSuccessNotification() {
                $("#success-noti").fadeIn(400); // Плавное появление блока
                setTimeout(function () {
                    $("#success-noti").fadeOut(400); // Плавное исчезновение блока через некоторое время (например, 3 секунды)
                }, 3000);
            }

            $("#showNotification").click(function () {
                showSuccessNotification();
            });


        });
    </script>
}

